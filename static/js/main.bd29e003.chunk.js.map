{"version":3,"sources":["Sorting_Vis/getMergeSort.js","Sorting_Vis/SortingVisualiser.jsx","Sorting_Vis/getSelecttionSort.js","Sorting_Vis/getInsertionSort.js","Sorting_Vis/getBubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualiser","props","state","this","resetArray","min","max","random","setState","console","log","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","animation","temp","pos","getSelectionSortAnimation","hash","dlength","x","a","c","m","auxillary","key","getInsertionSortAnimations","colorChange","barIdx","barStyle","getBubbleSortAnimation","newHeight1","className","map","value","idx","onClick","mergeSort","bubbleSort","insertionSort","selectionSort","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd29e003.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n\r\n  return animations;\r\n\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport { getMergeSortAnimations } from \"./getMergeSort\";\r\nimport { getInsertionSortAnimations } from \"./getInsertionSort\";\r\nimport \"./SortingVisualiser.css\";\r\nimport { getBubbleSortAnimation } from \"./getBubbleSort\";\r\nimport { getSelectionSortAnimation } from \"./getSelecttionSort\";\r\n//import { getInsertionSortAnimation } from \"./getInsertionSort\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\n//const NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"black\";\r\n\r\nclass SortingVisualiser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 90; i++) {\r\n      array.push(randomIntFromInterval(5, 600));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    console.log(animations);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      //console.log(arrayBars);\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n        //console.log(barTwoStyle);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort() {\r\n    const animations = getSelectionSortAnimation(this.state.array);\r\n    const hash = [];\r\n    var length = this.state.array.length - 1;\r\n    var dlength = length * 2 + 2;\r\n    var x = -1;\r\n    var a = dlength;\r\n    var b = dlength - 2;\r\n    var c = a + b;\r\n\r\n    for (let k = dlength - 4; k > 0; k = k - 2) {\r\n      hash[k] = c;\r\n      c = c + k;\r\n    }\r\n    //console.log(hash[4]);\r\n    //console.log(dlength);\r\n\r\n    console.log(animations);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      x = x + 1;\r\n      if (i < dlength || i < a + dlength) {\r\n        // var b = dlength;\r\n        var m = a;\r\n        //var c = a+b;\r\n\r\n        if (x === dlength) {\r\n          dlength = dlength - 2;\r\n\r\n          x = 0;\r\n        }\r\n      } else {\r\n        if (x === dlength) {\r\n          dlength = dlength - 2;\r\n\r\n          x = 0;\r\n        }\r\n\r\n        for (let k = a - 4; k > 0; k = k - 2) {\r\n          if (dlength === k) m = hash[k];\r\n          //console.log(hash[k]);\r\n          // console.log(m);\r\n        }\r\n\r\n        //var m =50;\r\n      }\r\n\r\n      console.log(i);\r\n      console.log(m);\r\n      console.log(dlength);\r\n      // console.log(c);\r\n\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      var k = i % m;\r\n      const isColorChange = k !== dlength - 2 && k !== dlength - 1;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        const color = k % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n        //console.log(barTwoStyle);\r\n        //console.log(animations[i]);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n          //console.log(animations[i]);\r\n          //console.log(dlength);\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSort() {\r\n    /* \r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    console.log(animations);\r\n\r\n    \r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      //console.log(arrayBars);\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n        //console.log(barTwoStyle);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    } */\r\n    //this.disableSortButtons();\r\n\r\n    const animations = getInsertionSortAnimations(this.state.array);\r\n    console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const colorChange =\r\n        animations[i][0] === \"comparison1\" ||\r\n        animations[i][0] === \"comparison2\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n      if (colorChange === true) {\r\n        const color =\r\n          animations[i][0] === \"comparison1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [temp, barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [temp, barIdx, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIdx].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimation(this.state.array);\r\n\r\n    console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      //console.log(\"array-container\");\r\n      const isColorChange = i % 4 !== 3 && i % 4 !== 2;\r\n      if (isColorChange) {\r\n        console.log(animations[i]);\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n        //console.log(barTwoStyle);\r\n      } else {\r\n        setTimeout(() => {\r\n          console.log(animations[i]);\r\n          const [barOneIdx, newHeight1] = animations[i];\r\n          //const [barTwoIdx, newHeight2] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          //const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          barOneStyle.height = `${newHeight1}px`;\r\n          //barTwoStyle.height = `${newHeight2}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            key={idx}\r\n            style={{ height: `${value}px` }}\r\n          ></div>\r\n        ))}\r\n        <div>\r\n          <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n          <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n          <button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n/* function arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) return false;\r\n  }\r\n  return true;\r\n} */\r\n\r\nexport default SortingVisualiser;\r\n","export function getSelectionSortAnimation(array) {\r\n  const animation = [];\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    var min = array[i];\r\n    var pos = i;\r\n    var temp;\r\n\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animation.push([i, j]);\r\n      animation.push([i, j]);\r\n      if (array[j] < min) {\r\n        min = array[j];\r\n        pos = j;\r\n      }\r\n    }\r\n    if (min !== array[i]) {\r\n      animation.push([i, array[pos]]);\r\n      animation.push([pos, array[i]]);\r\n      temp = array[pos];\r\n      array[pos] = array[i];\r\n      array[i] = temp;\r\n    }\r\n    else{\r\n        animation.push([i, array[i]]);\r\n\r\n        animation.push([i, array[i]]);    }\r\n  }\r\n  return animation;\r\n}\r\n","export function getInsertionSortAnimations(array) {\r\n  const animation = [];\r\n  const auxillary = array.slice();\r\n \r\n  for (let i = 1; i < array.length; i++) {\r\n    const key = auxillary[i];\r\n    var j = i - 1;\r\n    animation.push([\"comparison1\", i, j]);\r\n    animation.push([\"comparison2\", i, j]);\r\n    while (j >= 0 && auxillary[j] > key) {\r\n      animation.push([\"overwrite\", j+1, auxillary[j]]);\r\n      auxillary[j + 1] = auxillary[j];\r\n     \r\n      j = j - 1;\r\n      if (j >= 0 ) {\r\n        animation.push([\"comparison1\", i, j]);\r\n        animation.push([\"comparison2\", i, j]);\r\n      }\r\n    }\r\n    animation.push([\"overwrite\", j+1, key]);\r\n    auxillary[j + 1] = key;\r\n  }\r\n  return animation;\r\n}\r\n","export function getBubbleSortAnimation(array) {\r\n\r\n    const animation = [];\r\n    \r\n    var temp;\r\n    for(let i = 0; i< array.length ; i++)\r\n    {\r\n        for(let j = 0; j<array.length-i-1;j++)\r\n        {\r\n           animation.push([j,j+1]);\r\n           animation.push([j,j+1]);\r\n            if(array[j]>array[j+1])\r\n            {\r\n                animation.push([j,array[j+1]]);\r\n                animation.push([j+1,array[j]]);\r\n                temp=array[j];\r\n                array[j]=array[j+1];\r\n                array[j+1]=temp;\r\n            }\r\n            else\r\n            {\r\n                animation.push([j,array[j]]);\r\n                animation.push([j+1,array[j+1]]);\r\n            }\r\n        }\r\n     \r\n        \r\n    }\r\n    return animation;\r\n\r\n}","import React from 'react';\n//import logo from './logo.svg';\nimport SortingVisualiser from './Sorting_Vis/SortingVisualiser'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}